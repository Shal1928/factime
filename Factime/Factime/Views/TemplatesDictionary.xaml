<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:Models="clr-namespace:Factime.Models" 
                    xmlns:Converters="clr-namespace:Factime.Converters">
    
    <!-- Content for the template (note: not a template itself) -->
    <Border x:Shared="False" x:Key="Foo" BorderBrush="Red" BorderThickness="1" CornerRadius="4">
        <TextBlock Text="{Binding SomeProp}" />
    </Border>

    <DataTemplate x:Key="TemplateA">
        <!-- Static resource - No binding needed -->
        <ContentPresenter Content="{StaticResource Foo}" />
    </DataTemplate>

    <DataTemplate x:Key="TemplateB">
        <!-- Static resource - No binding needed -->
        <ContentPresenter Content="{StaticResource Foo}" />
    </DataTemplate>

    <!--<Style x:Key="CellGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="ColumnDefinition" Value="" />
        
    </Style>-->

    <!--***   Base TextBlockPresenterStyle ***-->
    <Style x:Key="TextPresenterBase" TargetType="{x:Type TextBlock}">
        <Setter Property="Text" Value="{Binding Date, StringFormat=dd}" />
        
        <Setter Property="FontSize" Value="28" />

        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5" />

        <Setter Property="Grid.Column" Value="0" />
        <Setter Property="Grid.Row" Value="0" />
        <Setter Property="Grid.RowSpan" Value="3" />
    </Style>

    <Style x:Key="TextPresenter" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextPresenterBase}">
                
        <Style.Triggers>
            <!--Holiday in current month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Holiday}" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#ffFF6B40" />
            </MultiDataTrigger>
            
            <!--PreHoliday in current month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.PreHoliday}" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#ff086CA2" />
            </MultiDataTrigger>

            <!--Workday in current month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Workday}" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#88000000" />
            </MultiDataTrigger>


            <!--Holiday in another month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Holiday}" />
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#88FF6B40" />
            </MultiDataTrigger>

            <!--PreHoliday in another month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.PreHoliday}" />
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#88086CA2" />
            </MultiDataTrigger>

            <!--Workday in another month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Workday}" />
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#44000000" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>



    <!--<x:Array x:Key="ConverterParametrForHoliday" Type="{x:Type Models:DayType}">
        <x:Static Member="Models:DayType.Workday" />
        <x:Static Member="Models:DayType.PreHoliday" />
    </x:Array>
    <x:Array x:Key="ConverterParametrForPreHoliday" Type="{x:Type Models:DayType}">
        <x:Static Member="Models:DayType.Workday" />
        <x:Static Member="Models:DayType.Holiday" />
    </x:Array>
    <x:Array x:Key="ConverterParametrForPreWorkday" Type="{x:Type Models:DayType}">
        <x:Static Member="Models:DayType.PreHoliday" />
        <x:Static Member="Models:DayType.Holiday" />
    </x:Array>-->
    
    <!--***   Base RadioButtonPresenterStyle ***-->
    <Style x:Key="RadioButtonPresenter" TargetType="{x:Type RadioButton}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="#55000000" />

        <!--<Setter Property="Margin" Value="5" />-->
        <Setter Property="Grid.Column" Value="1" />
    </Style>

    <Style x:Key="HolydayRadioButtonPresenter" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="IsChecked" Value="{Binding Type, Mode=TwoWay, ConverterParameter={x:Static Models:DayType.Holiday}, Converter={Converters:DayTypeToBoolConverter}}" />
        
        <Setter Property="Content" Value="Вых." />
        <Setter Property="Margin" Value="5,5,5,0" />
        <Setter Property="Grid.Row" Value="0" />
    </Style>    
    <Style x:Key="PreHolidayRadioButtonPresenter" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="IsChecked" Value="{Binding Type, Mode=TwoWay, ConverterParameter={x:Static Models:DayType.PreHoliday}, Converter={Converters:DayTypeToBoolConverter}}" />
        
        <Setter Property="Content" Value="Пред." />
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="Grid.Row" Value="1" />
        <!--<Setter Property="Foreground" Value="Red" />-->
    </Style>
    <Style x:Key="WorkdayRadioButtonPresenter" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="IsChecked" Value="{Binding Type, Mode=TwoWay, ConverterParameter={x:Static Models:DayType.Workday}, Converter={Converters:DayTypeToBoolConverter}}" />
        
        <Setter Property="Content" Value="Раб." />
        <Setter Property="Margin" Value="5,0,5,5" />
        <Setter Property="Grid.Row" Value="2" />
    </Style>




    <DataTemplate x:Key="DefaultDataGridCellTemplate">
        <Grid Style="{DynamicResource DefaultGridCellTemplate}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <TextBlock Style="{DynamicResource TextPresenter}" />

            <RadioButton Style="{DynamicResource HolydayRadioButtonPresenter}" />
            <RadioButton Style="{DynamicResource PreHolidayRadioButtonPresenter}" />
            <RadioButton Style="{DynamicResource WorkdayRadioButtonPresenter}" />

        </Grid>
    </DataTemplate>

    <Style x:Key="DefaultGridCellTemplate" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="5" />
        
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <!--***********************************-->
    <!--*                                 *-->
    <!--*   AddValueCellEditingTemplate   *-->
    <!--*                                 *-->
    <!--****************V******************-->

    <!--Create TemplateSelector for all variants-->
    <ControlTemplate x:Key="AddValueCellEditingTemplate">
        <!--<TextBlock Text="{Binding}" Padding="0" />-->
        <!--<ContentPresenter Content="{TemplateBinding Content}">

        </ContentPresenter>-->
        <Grid Background="Red">

            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                          HorizontalAlignment="Center"  VerticalAlignment="Center" 
                          Margin="8,0,8,0"/>
        </Grid>
    </ControlTemplate>



    <!--***********************************-->
    <!--*                                 *-->
    <!--*   DefaultDataGridColumnHeader   *-->
    <!--*                                 *-->
    <!--****************V******************-->

    <ControlTemplate x:Key="DefaultDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <!--<ControlTemplate.Resources>
            <Style TargetType="{x:Type Thumb}">
                <Setter Property="FrameworkElement.Width" Value="1"/>
                <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Thumb">
                            <Border Background="{TemplateBinding Background}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SortPathStyle" TargetType="{x:Type Path}">
                <Setter Property="Fill" Value="#cc000000"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="5,70,5,0"/>
                <Setter Property="Visibility" Value="Hidden"/>
            </Style>
        </ControlTemplate.Resources>-->

        <Grid>
            <Border Name="MainBorder" Background="{DynamicResource GridHeaderGradientBrush}">

                <Grid>
                    <ContentPresenter Margin="1,3,1,0" 
                                      HorizontalAlignment="Center" 
                                      VerticalAlignment="Center" 
                                      Content="{TemplateBinding Content}"
                                      ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                      ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Grid>
            </Border>

            <!--<Path Name="UpArrow" Style="{StaticResource SortPathStyle}">
                <Path.Data>
                    <PathGeometry>
                        <PathFigure StartPoint="0,0">
                            <LineSegment Point="7,0"/>
                            <LineSegment Point="3.5,6"/>
                            <LineSegment Point="0,0"/>
                        </PathFigure>
                    </PathGeometry>
                </Path.Data>
            </Path>

            <Path Name="DownArrow" Style="{StaticResource SortPathStyle}">
                <Path.Data>
                    <PathGeometry>
                        <PathFigure StartPoint="0,6">
                            <LineSegment Point="7,6"/>
                            <LineSegment Point="3.5,0"/>
                            <LineSegment Point="0,6"/>
                        </PathFigure>
                    </PathGeometry>
                </Path.Data>
            </Path>-->

            <!--<Thumb Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Background="#F7FEF7"/>
            <Thumb Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Background="#C6D7C5"/>-->

        </Grid>

        <!--<ControlTemplate.Triggers>
            <Trigger Property="SortDirection" Value="Descending">
                <Setter TargetName="UpArrow" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="DownArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="SortDirection" Value="Ascending">
                <Setter TargetName="DownArrow" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="UpArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>-->

    </ControlTemplate>

</ResourceDictionary>