<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Converters="clr-namespace:Factime.Converters" xmlns:Models="clr-namespace:Factime.Models"
                    xmlns:Test="clr-namespace:UseAbilities.WPF.Converters.Test;assembly=UseAbilities.WPF">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Views\TemplatesDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!--***********-->
    <!--*         *-->
    <!--*   Grid  *-->
    <!--*         *-->
    <!--*****V*****-->

    <Style x:Key="DefaultGridCellTemplate" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="5" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>





    <!--******************-->
    <!--*                *-->
    <!--*   RadioButton  *-->
    <!--*                *-->
    <!--*********V********-->

    <!--***   Base RadioButtonPresenterStyle ***-->
    <Style x:Key="RadioButtonPresenter" TargetType="{x:Type RadioButton}">
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="#55000000" />
        <Setter Property="FontFamily" Value="Verdana" />
        
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template" Value="{DynamicResource LinkRadioButton}" />

        <Setter Property="Grid.Column" Value="1" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#ff000000" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="#ff000000" />
                <Setter Property="Template" Value="{DynamicResource CheckedLinkRadioButton}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HolydayRadioButtonPresenter" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Content" Value="Вых" />
        <Setter Property="Margin" Value="5,5,5,3" />
        <Setter Property="Grid.Row" Value="0" />
    </Style>
    <Style x:Key="PreHolidayRadioButtonPresenter" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Content" Value="Пред" />
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="Grid.Row" Value="1" />
    </Style>
    <Style x:Key="WorkdayRadioButtonPresenter" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Content" Value="Раб" />
        <Setter Property="Margin" Value="5,3,5,5" />
        <Setter Property="Grid.Row" Value="2" />
    </Style>

    <Style x:Key="MonthRadioButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonPresenter}">
        <Setter Property="Margin" Value="5" />
    </Style>

    
    
    
    
    <!--*******************-->
    <!--*                 *-->
    <!--*   ToggleButton  *-->
    <!--*                 *-->
    <!--*********V*********-->
    
    <Style x:Key="DateToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template" Value="{DynamicResource DateToggleButtonTemplate}" />
        
        <Style.Triggers>           
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template" Value="{DynamicResource MouseOverDateToggleButtonTemplate}" />
            </Trigger>           
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Template" Value="{DynamicResource CheckedDateToggleButtonTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    
    
    
    <!--**************-->
    <!--*            *-->
    <!--*   Ellipse  *-->
    <!--*            *-->
    <!--*******V******-->

    <Style x:Key="EllipseMarkerStyle" TargetType="{x:Type Ellipse}">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />

        <Setter Property="Stroke" Value="#88FF6B40" />
        <Setter Property="StrokeThickness" Value="5" />
        <Setter Property="Fill" Value="Transparent" />
    </Style>

    <!--<Style x:Key="EllipseMarkerStyle" TargetType="{x:Type Ellipse}" BasedOn="{StaticResource EllipseStyleBase}">
        <Setter Property="Stroke" Value="White" />
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Stroke" Value="#88FF6B40" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Stroke" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style x:Key="EllipseMarkedStyle" TargetType="{x:Type Ellipse}" BasedOn="{StaticResource EllipseMarkerStyle}">
        <Setter Property="Stroke" Value="#ffFF6B40" />
    </Style>





    <!--**************-->
    <!--*            *-->
    <!--*   TextBox  *-->
    <!--*            *-->
    <!--*******V******-->

    <Style x:Key="TextBoxTimeStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{DynamicResource WorkdayColorSolidBrush}" />
        
        <Setter Property="BorderBrush" Value="Transparent" />
        
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="18" />

        <Setter Property="Template" Value="{DynamicResource TextBoxHidedTempalte}" />
    </Style>

    <Style x:Key="TextBoxPreHolidayTimeStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxTimeStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PreHolidayColorSolidBrush}" />
    </Style>





    <!--****************-->
    <!--*              *-->
    <!--*   TextBlock  *-->
    <!--*              *-->
    <!--*******V********-->

    <Style x:Key="TextBlockDefaultStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{DynamicResource WorkdayColorSolidBrush}" />
        
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>    

    <Style x:Key="TextBlockTitleStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockDefaultStyle}">
        <Setter Property="FontWeight" Value="DemiBold" />   
    </Style>

    <Style x:Key="TextBlockPreHolidayDefaultStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockDefaultStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PreHolidayColorSolidBrush}" />
    </Style>
    
    <Style x:Key="TextBlockPreHolidayTitleStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockPreHolidayDefaultStyle}">
        <Setter Property="FontWeight" Value="DemiBold" />
    </Style>

    <Style x:Key="TextBlockHolidayDefaultStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockDefaultStyle}">
        <Setter Property="Foreground" Value="{DynamicResource HolidayColorSolidBrush}" />
    </Style>

    <Style x:Key="TextBlockHolidayTitleStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockHolidayDefaultStyle}">
        <Setter Property="FontWeight" Value="DemiBold" />
    </Style>


    <!--***   Base TextBlockPresenterStyle ***-->
    <Style x:Key="TextPresenterBase" TargetType="{x:Type TextBlock}">
        <Setter Property="Text" Value="{Binding Date, StringFormat=dd}" />

        <Setter Property="FontSize" Value="28" />

        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5" />

        <!--<Setter Property="Grid.Column" Value="0" />
        <Setter Property="Grid.Row" Value="0" />
        <Setter Property="Grid.RowSpan" Value="3" />-->
    </Style>

    <Style x:Key="TextPresenter" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextPresenterBase}">

        <Style.Triggers>
            <!--Holiday in current month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Holiday}" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource HolidayColorSolidBrush}" />
            </MultiDataTrigger>

            <!--PreHoliday in current month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.PreHoliday}" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource PreHolidayColorSolidBrush}" />
            </MultiDataTrigger>

            <!--Workday in current month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Workday}" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource WorkdayColorSolidBrush}" />
            </MultiDataTrigger>


            <!--Holiday in another month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Holiday}" />
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource HolidayColorHalfSolidBrush}" />
            </MultiDataTrigger>

            <!--PreHoliday in another month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.PreHoliday}" />
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource PreHolidayHalfColorSolidBrush}" />
            </MultiDataTrigger>

            <!--Workday in another month-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="{x:Static Models:DayType.Workday}" />
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{Converters:CompareConditionMultiConverter}">
                                <Binding Path="DataContext.SelectedMonth" RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}" />
                                <Binding Path="Date" Converter="{Converters:ExtractMonthConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource WorkdayColorHalfSolidBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>





    <!--****************-->
    <!--*              *-->
    <!--*   DataGrid   *-->
    <!--*              *-->
    <!--*******V********-->

    <Style x:Key="FactimeDataGridStyle" TargetType="{x:Type DataGrid}">

        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource ColumnHeader}"/>
        <Setter Property="CellStyle" Value="{DynamicResource SimplyCellStyle}"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ItemStyle}"/>
        
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,0,0,5" />
        <Setter Property="BorderBrush" Value="{DynamicResource YellowSolidBrush}" />
        <Setter Property="HorizontalGridLinesBrush" Value="Transparent"/>
        <Setter Property="VerticalGridLinesBrush" Value="Transparent"/>
        
        <Setter Property="AutoGenerateColumns" Value="False" />

        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Vertical"/>

        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="SelectionUnit" Value="Cell"/>
        <Setter Property="ClipboardCopyMode" Value="IncludeHeader"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
    </Style>



    <!--***********-->
    <!--*         *-->
    <!--*   Row   *-->
    <!--*         *-->
    <!--*****V*****-->

    <Style x:Key="ItemStyle" TargetType="{x:Type DataGridRow}">

        <Setter Property="Margin" Value="0,1,0,1"/>
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="Background" Value="Transparent" />
    </Style>



    <!--************-->
    <!--*          *-->
    <!--*   Cell   *-->
    <!--*          *-->
    <!--*****V******-->

    <Style x:Key="SimplyCellStyle" TargetType="{x:Type DataGridCell}">

        <!--<Setter Property="Template" Value="{DynamicResource DefaultDataGridCellTemplate}" />-->

        <!--<Setter Property="TextBlock.FontFamily" Value="Verdana" />
        <Setter Property="TextBlock.FontSize" Value="12"/>-->
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="Auto"/>

        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="DataGridCell.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MouseOverGradientBrush}" />
            </Trigger>            
        </Style.Triggers>

    </Style>



    <!--*********************-->
    <!--*                   *-->
    <!--*   ColumnHeader    *-->
    <!--*                   *-->
    <!--**********V**********-->

    <Style x:Key="ColumnHeader" TargetType="{x:Type DataGridColumnHeader}">

        <Setter Property="Template" Value="{DynamicResource DefaultDataGridColumnHeader}" />
        
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#cc000000" />
        <Setter Property="Height" Value="24" />
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="SeparatorVisibility" Value="Collapsed" />
    </Style>




    <Color x:Key="HolidayColor">#ffFF6B40</Color>
    <Color x:Key="HolidayHalfColor">#88FF6B40</Color>
    <Color x:Key="HolidayQuartColor">#33FF6B40</Color>  
    
    <Color x:Key="PreHolidayColor">#ff086CA2</Color>
    <Color x:Key="PreHolidayHalfColor">#88086CA2</Color>
    <Color x:Key="PreHolidayQuartColor">#33086CA2</Color>

    <Color x:Key="WorkdayColor">#88000000</Color>
    <Color x:Key="WorkdayHalfColor">#44000000</Color>
    <Color x:Key="WorkdayQuartColor">#11000000</Color>

    
    <Color x:Key="LightBlueVankor">#ffC3CBE5</Color>
    
    <Color x:Key="DarkBlueVankor">#ff233B8A</Color>

    <Color x:Key="YellowVankor">#ffFAD500</Color>

    <Color x:Key="PinkVankor">#ffF9EEB0</Color>

    <Color x:Key="DarkGrayVankor">#ff777777</Color>
    <Color x:Key="GrayVankor">#ffAAAAAA</Color>
    <Color x:Key="LightGrayVankor">#ffBBBBBB</Color>
    <Color x:Key="MediumLightGrayVankor">#ffDDDDDD</Color>
    <Color x:Key="VeryLightGrayVankor">#ffEEEEEE</Color>


    <!--<GradientStop Color="#ffEEEEEE" Offset="0"/>
    <GradientStop Color="#ffDDDDDD" Offset="0.75"/>
    <GradientStop Color="#ffAAAAAA" Offset="1"/>-->

    <SolidColorBrush x:Key="LightBlueSolidBrush" Color="{StaticResource LightBlueVankor}" />

    <SolidColorBrush x:Key="YellowSolidBrush" Color="{StaticResource YellowVankor}" />
    <SolidColorBrush x:Key="PinkSolidBrush" Color="{StaticResource PinkVankor}" />

    <SolidColorBrush x:Key="GrayVankorSolidBrush" Color="{StaticResource GrayVankor}" />
    <SolidColorBrush x:Key="GraySolidBrush" Color="{StaticResource DarkGrayVankor}" />
    <SolidColorBrush x:Key="LinkOverSolidBrush" Color="#ff000000" />
    <SolidColorBrush x:Key="LightGraySolidBrush" Color="{StaticResource LightGrayVankor}" />
    <SolidColorBrush x:Key="VeryLightGrayVankorSolidBrush" Color="{StaticResource VeryLightGrayVankor}" />

    <SolidColorBrush x:Key="HolidayColorSolidBrush" Color="{StaticResource HolidayColor}" />
    <SolidColorBrush x:Key="HolidayColorHalfSolidBrush" Color="{StaticResource HolidayHalfColor}" />
    <SolidColorBrush x:Key="PreHolidayColorSolidBrush" Color="{StaticResource PreHolidayColor}" />
    <SolidColorBrush x:Key="PreHolidayHalfColorSolidBrush" Color="{StaticResource PreHolidayHalfColor}" />
    <SolidColorBrush x:Key="WorkdayColorSolidBrush" Color="{StaticResource WorkdayColor}" />
    <SolidColorBrush x:Key="WorkdayColorHalfSolidBrush" Color="{StaticResource WorkdayHalfColor}" />

    <LinearGradientBrush x:Key="PreHolidayGradientBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource PreHolidayQuartColor}" Offset="0"/>
        <GradientStop Color="{StaticResource PreHolidayHalfColor}" Offset="0.75"/>
        <GradientStop Color="{StaticResource PreHolidayColor}" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="MouseOverGradientBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource PinkVankor}" Offset="0" />
            <GradientStop Color="{StaticResource YellowVankor}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightItemGradientBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#ffFFFFFF" Offset="0" />
            <GradientStop Color="{StaticResource PinkVankor}" Offset="0.75" />
            <GradientStop Color="{StaticResource YellowVankor}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GridHeaderGradientBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#ffFFFFFF" Offset="0"/>
        <GradientStop Color="{StaticResource YellowVankor}" Offset="0.75"/>
        <GradientStop Color="{StaticResource YellowVankor}" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DoubleGrayPanelGradientBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource VeryLightGrayVankor}" Offset="0.75"/>
        <GradientStop Color="{StaticResource MediumLightGrayVankor}" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="GrayPanelGradientBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource VeryLightGrayVankor}" Offset="0"/>
        <GradientStop Color="{StaticResource MediumLightGrayVankor}" Offset="0.75"/>
        <GradientStop Color="{StaticResource GrayVankor}" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedGradientBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#33000000" Offset="0"/>
        <GradientStop Color="#33000000" Offset="1"/>
    </LinearGradientBrush>


</ResourceDictionary>